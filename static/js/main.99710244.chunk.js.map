{"version":3,"sources":["useFetchJobs.js","Job.js","JobsPage.js","SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","MAKE_REQUEST","GET_DATA","ERROR","UPDATE_HAS_NEXT_PAGE","BASE_URL","reducer","state","action","type","loading","jobs","payload","error","hasNextPage","useFetchJobs","params","page","useReducer","dispatch","useEffect","cancelToken1","axios","CancelToken","source","get","cancelToken","token","markdown","then","res","data","catch","e","isCancel","cancelToken2","length","cancel","Job","job","useState","open","setOpen","Card","className","Body","Title","title","company","Subtitle","Date","created_at","toLocaleDateString","Badge","variant","style","fontSize","location","wordBreak","how_to_apply","height","src","company_logo","alt","Text","Button","onClick","prevOpen","Collapse","in","description","JobsPage","setPage","adjustPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","xs","Check","full_time","id","label","App","setParams","Container","param","target","prevParams","map","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.99710244.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst ACTIONS = {\r\n    MAKE_REQUEST: 'make-request',\r\n    GET_DATA: 'get-data',\r\n    ERROR: 'error',\r\n    UPDATE_HAS_NEXT_PAGE: 'update_has_next_page'\r\n}\r\n\r\nconst BASE_URL = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json'\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case ACTIONS.MAKE_REQUEST:\r\n            return { loading: true, jobs: [] }\r\n        case ACTIONS.GET_DATA:\r\n            return { ...state, loading: false, jobs: action.payload.jobs }\r\n        case ACTIONS.ERROR:\r\n            return { ...state, loading: false, error: action.payload.error, jobs: [] }\r\n        case ACTIONS.UPDATE_HAS_NEXT_PAGE:\r\n            return { ...state, hasNextPage: action.payload.hasNextPage }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction useFetchJobs(params, page) {\r\n\r\n    const [state, dispatch] = useReducer(reducer, { jobs: [], loading: true });\r\n\r\n    // dispatch({ type: 'hello', patload: { x: 3 } })\r\n\r\n    useEffect(() => {\r\n        const cancelToken1 = axios.CancelToken.source()\r\n        dispatch({ type: ACTIONS.MAKE_REQUEST })\r\n        axios.get(BASE_URL, {\r\n            cancelToken: cancelToken1.token,\r\n            params: { markdown: true, page: page, ...params }\r\n        }).then(res => {\r\n            dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data } })\r\n        }).catch(e => {\r\n            if (axios.isCancel(e)) return;\r\n            dispatch({ type: ACTIONS.error, payload: { error: e } })\r\n\r\n        })\r\n\r\n        const cancelToken2 = axios.CancelToken.source()\r\n        axios.get(BASE_URL, {\r\n            cancelToken: cancelToken2.token,\r\n            params: { markdown: true, page: page + 1, ...params }\r\n        }).then(res => {\r\n            dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: { hasNextPage: res.data.length !== 0 } })\r\n        }).catch(e => {\r\n            if (axios.isCancel(e)) return;\r\n            dispatch({ type: ACTIONS.error, payload: { error: e } })\r\n\r\n        })\r\n\r\n\r\n\r\n        return () => {\r\n            cancelToken1.cancel()\r\n            cancelToken2.cancel()\r\n        }\r\n\r\n    }, [params, page])\r\n\r\n    return state;\r\n}\r\n\r\nexport default useFetchJobs;\r\n","import React, { useState } from 'react'\r\nimport { Card, Badge, Button, Collapse } from 'react-bootstrap'\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nexport default function Job({ job }) {\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    return (\r\n        <Card className=\"mb-3\">\r\n            <Card.Body>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <div className=\"\">\r\n                        <Card.Title>\r\n                            {job.title} - <span className=\"text-muted font-weight-light\">{job.company}</span>\r\n                        </Card.Title>\r\n                        <Card.Subtitle className=\"text-muted mb-2\">\r\n                            {new Date(job.created_at).toLocaleDateString()}\r\n                        </Card.Subtitle>\r\n                        <Badge variant=\"secondary\" className=\"mr-2\" style={{ fontSize: \"14px\" }}>{job.type}</Badge>\r\n                        <Badge variant=\"secondary\" style={{ fontSize: \"14px\" }}>{job.location}</Badge>\r\n                        <div style={{ wordBreak: 'break-all', fontSize: '15px' }}>\r\n                            <ReactMarkdown source={job.how_to_apply} />\r\n                        </div>\r\n                    </div>\r\n                    <img className=\"d-none d-md-block\" height=\"50\" src={job.company_logo} alt={job.company} />\r\n                </div>\r\n                <Card.Text>\r\n                    <Button onClick={() => setOpen(prevOpen => !prevOpen)} variant=\"primary\">{open ? 'Hide Detail' : 'View Detail' }</Button>\r\n                </Card.Text>\r\n                <Collapse in={open}>\r\n                    <div className=\"mt-4\">\r\n                        <ReactMarkdown source={job.description} />\r\n                    </div>\r\n                </Collapse>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\n\r\nexport default function JobsPage({ page, setPage, hasNextPage }) {\r\n\r\n    function adjustPage(amount) {\r\n        setPage(prevPage => prevPage + amount)\r\n    }\r\n\r\n    return (\r\n        <Pagination>\r\n            {page !== 1 && <Pagination.Prev onClick={() => adjustPage(-1)} />}\r\n            {page !== 1 && <Pagination.Item onClick={() => setPage(1)}> 1</Pagination.Item>}\r\n            {page > 2 && <Pagination.Ellipsis />}\r\n            {page > 2 && <Pagination.Item onClick={() => adjustPage(-1)}>{page - 1}</Pagination.Item>}\r\n            <Pagination.Item active>{page}</Pagination.Item>\r\n            {hasNextPage && <Pagination.Item onClick={() => adjustPage(1)}>{page + 1}</Pagination.Item>}\r\n            {hasNextPage && <Pagination.Next onClick={() => adjustPage(1)} />}\r\n        </Pagination>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Form, Col } from 'react-bootstrap'\r\n\r\nexport default function SearchForm({ params, onParamChange}) {\r\n    return (\r\n        <div>\r\n            <Form className=\"mb-4\">\r\n                <Form.Row>\r\n                    <Form.Group as={Col}>\r\n                        <Form.Label>Description</Form.Label>\r\n                        <Form.Control onChange={onParamChange} value={params.description} name=\"description\" type=\"text\" />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col}>\r\n                        <Form.Label>Location</Form.Label>\r\n                        <Form.Control onChange={onParamChange} value={params.location} name=\"location\" type=\"text\" />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} xs=\"auto\" className=\"ml-2\">\r\n                        <Form.Check onChange={onParamChange} value={params.full_time} name=\"full_time\" id=\"full_time\" label=\"only full time\" \r\n                            type=\"checkbox\" className=\"mb-2\" />\r\n\r\n                    </Form.Group>\r\n                </Form.Row>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport useFetchJobs from './useFetchJobs';\nimport { Container } from 'react-bootstrap'\nimport Job from './Job';\nimport JobsPage from './JobsPage';\nimport SearchForm from './SearchForm';\n\nfunction App() {\n\n  const [params, setParams] = useState({})\n  const [page, setPage] = useState(1)\n\n  const { jobs, loading, error, hasNextPage } = useFetchJobs(params, page)\n\n  function handleParamChange(e) {\n    const param = e.target.name\n    const value = e.target.value\n    setPage(1)\n    setParams(prevParams => {\n      return {...prevParams, [param]: value}\n    })\n  }\n\n\n  return (\n    <Container className=\"my-4\">\n      <h1 className=\"mb-4\">Github Jobs</h1>\n      <SearchForm params={params} onParamChange={handleParamChange} />\n      <JobsPage page={page} setPage={setPage} hasNextPage={true} />\n      {loading && <h1>Loading...</h1>}\n      {error && <h1>Error, try to reload </h1>}\n      <h1>{jobs.map(job => {\n        return <Job key={job.id} job={job}></Job>\n      })}</h1>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}